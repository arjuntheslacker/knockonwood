
# global variables
rhythmSens = 0.1
	# rhythm sensitivity is the tolerance of inaccuracy within a knock pattern

# Knock patterns are of datatype KNOCKPAT, to be defined in the future
# For now, respect the interface whenever possible.
# 2014-1-4: KNOCKPATs are of type REAL LIST
# knock pattern invariant: at least 1 element long
# number of elements in a knock pattern is equal to the number of knocks - 1

# invariant: 0 <= self.index < length(knockPats)
class User(object):
	def __init__(self, knockPats):
		self.knockPats = knockPats
		self.index = 0
	
	def getPat(self):
		return self.knockPats[self.index]

	def incIndex(self):
		self.index = (self.index + 1) % len(self.knockPats)

	def newPat(self, knockPat):
		self.knockPat = self.knockPat + knockPat

# test cases
Andy = User([1.0, 2.0, 3.0])
print Andy.getPat()

User.incIndex(Andy)
print Andy.getPat()
 
# knock1 and knock2 are KNOCKPATs
# returns true if the knocks are equal, false otherwise
def compKnock(knock1, knock2):
	if (len(knock1) != len(knock2)): return False
	for i in xrange(len(knock1)):
		if (knock2[i] > knock1[i] + knockSens) or \
		   (knock2[i] < knock1[i] - knockSens):
			return False
	return True

# knockPat: KNOCKPAT
# users: list of users
# returns true if the knock pattern is recognized, false otherwise
# if a knock pattern is recognized, then the cycle index is incremented
def checkKnock(knockPat, userList):
	for i in xrange(len(userList)):
		user = userList[i]
		if compKnock(knockPat, User.getPat(user)):
			User.incIndex(user)
			return True
	return False

def newKnock(user):
	raise Exception("Unimplemented")

def newUser():
	raise Exception("Unimplemented")

def removeKnock():
	raise Exception("Unimplemented")

def removeUser():
	raise Exception("Unimplemented")

