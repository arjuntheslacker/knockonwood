import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)

# 2014-1-4 NOTE: ALL GLOBAL VARIABLES ARE DUMMY VALUES

# global variables
# knockThres = 128
	# knock threshold filters out weak vibrations
timeOut = 2.5
	# maximimum amount of time allowed between knocks
piezo1 = 18
	# the gpio channel for the first piezo element
motor = 20
	# the gpio channel for the motor
motorTime = 3
	# the amount of time for which the motor engages to open the door
openTime = 5
	# the amount of time for which the door remains unlocked

# channel set-up
GPIO.setup(piezo1, GPIO.IN)
GPIO.setup(motor, GPIO.OUT)

# isKnockPat: real array -> bool
# returns true if the given array is a knock pattern. false otherwise
def isKnockPat(knockPattern):
	if (len(knockPattern) < 1): return False
	if (knockPattern[0] == 0.0): return False
	return True

# ENSURES: returns a knock pattern of at least length 1
def recordKnockPat(knockPattern, piezo):
	start = time.time()
	while True:
		now = time.time()
		if ((now - start) > timeOut):
			return knockPattern
		if GPIO.input(piezo):
			return recordKnockPat(knockPattern + [now - start], piezo)
		time.sleep(0.01)

def normalize(knockPattern):
	first = knockPattern[0]
	for i in xrange(len(knockPattern)):
		knockPattern[i] = knockPattern[i] / first

def openDoor():
	GPIO.output(motor, True)
	time.sleep(motorTime)
	GPIO.output(motor, False)
	time.sleep(openTime)

def main():
	while True:
		if GPIO.input(piezo1):
			knockPattern = recordKnockPat([], piezo1)
			if !(isKnockPat(knockPattern)): 
				time.sleep(0.01) 
				# start listening again
			else: 
				knockPattern = normalize(knockPattern)
				if checkKnock(knockPattern):
					openDoor()
		else:
			time.sleep(0.01)

main()
