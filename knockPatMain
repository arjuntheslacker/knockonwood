import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)

# 2014-1-4 NOTE: ALL GLOBAL VARIABLES ARE DUMMY VALUES

# global variables
rhythmSens = 0.1
	# rhythm sensitivity is the tolerance of inaccuracy within a knock pattern	
timeOut = 2.5
	# maximimum amount of time allowed between knocks
piezo0 = 18
piezo1 = 19
piezo2 = 20
piezo3 = 21
piezo4 = 22
piezo5 = 23
	# the gpio channels for the piezo elements
piezos = [piezo0, piezo1, piezo2, piezo3, piezo4, piezo5]
	# an array containing the channels of the piezo elements
motor = 16
	# the gpio channel for the motor
motorTime = 3
	# the amount of time for which the motor engages to open the door
openTime = 5
	# the amount of time for which the door remains unlocked
sleepTime = 0.05
	# amount of time to sleep for between knocks

# channel set-up
GPIO.setup(piezo0, GPIO.IN)
GPIO.setup(motor, GPIO.OUT)

# invariant: 0 <= self.index < length(knockPats)
class User(object):
	def __init__(self, knockPats):
		self.knockPats = knockPats
		self.index = 0
	
	def getPat(self):
		return self.knockPats[self.index]

	def incIndex(self):
		self.index = (self.index + 1) % len(self.knockPats)

	def newPat(self, knockPat):
		self.knockPat = self.knockPat + knockPat

class Knock(object):
	def __init__(self, time, site):
		self.time = time
		self.site = site

# isKnockPat: real array -> bool
# returns true if the given array is a knock pattern. false otherwise
def isKnockPat(knockPattern):
	if (len(knockPattern) < 1): return False
	return True

# knock1 and knock2 are KNOCKPATs
# returns true if the knocks are equal, false otherwise
def compKnock(knock1, knock2):
	if (len(knock1) != len(knock2)): return False
	for i in xrange(len(knock1)):
		if (knock2[i].time > knock1[i].time + knockSens) or \
		   (knock2[i].time < knock1[i].time - knockSens):
			return False
		if (knock2[i].site != knock1[i].site):
			return False
	return True

# knockPat: KNOCKPAT
# users: list of users
# returns true if the knock pattern is recognized, false otherwise
# if a knock pattern is recognized, then the cycle index is incremented
def checkKnock(knockPat, userList):
	for i in xrange(len(userList)):
		user = userList[i]
		if compKnock(knockPat, User.getPat(user)):
			User.incIndex(user)
			return True
	return False

# ENSURES: returns a knock pattern of at least length 1
def recordKnockPat(knockPattern, piezo):
	start = time.time()
	while True:
		now = time.time()
		if ((now - start) > timeOut):
			return knockPattern
		if GPIO.input(piezo):
			return recordKnockPat(knockPattern.time + [now], piezo)
		time.sleep(0.01)

def getKnock():
	for i in xrange(len(piezos)):
		if GPIO.input(piezos[i]):
			return (True, Knock(time.time(), i)) 
	return (False, None)

def recordKnockPat():
	start = time.time()
	knockPattern = []
	while True:
		now = time.time()
		if ((now - start) > timeOut):
			return knockPattern
		(x, y) = getKnock()
			if x: 
				knockPattern = knockPattern + [y]
				time.sleep(sleepTime)

def normalize(knockPattern):
	first = knockPattern[0].time
	second = knockPattern[1].time - first
	for i in xrange(len(knockPattern)):
		knockPattern[i].time = (knockPattern[i].time - first) / second

def openDoor():
	now = time.time()
	while (time.time() < now + motorTime:
		GPIO.output(motor, GPIO.HIGH)
		time.sleep(0.0015)
		GPIO.output(motor, GPIO.LOW)
		time.sleep(0.0185)


def main():
	while True:
		if GPIO.input(piezo1):
			knockPattern = recordKnockPat()
			if !(isKnockPat(knockPattern)): 
				time.sleep(0.01) 
				# start listening again
			else: 
				knockPattern = normalize(knockPattern)
				if checkKnock(knockPattern):
					openDoor()
		else:
			time.sleep(0.01)

main()
